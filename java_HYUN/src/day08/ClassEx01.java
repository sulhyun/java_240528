package day08;

/*
	메서드 
	- 클래스의 기능 
	- 다른 표현으로는 멤버 함수. 
	- 자바에서는 모든 함수는 메서드이다
	- 함수가 기능이라면 메서드는 객체에 있는 기능
	- 자바에 나오는 모든 기능은 메서드
	- 함수는 필요한 정보를 모두 매개변수로 전달
	- 메서드는 클래스의 기능이기 때문에 일부 정보는 클래스의 멤버 변수로
	가져올 수 있음.
 */

/*
	패키지
	- 간단히 설명하면 클래스 파일의 묶음.
	- 비슷한 기능들을 하는 클래스들끼리 묶어 놓는게 일반적이다.
	예) java.util, java.lang
	- 패키지를 이용하여 계층구조를 잡을 수 있고, 이를 이용하여 소스코드
	관리와 유지 보수가 편리하게 한다.
 */

/*
	함수
	- 하나의 기능을 수행하는 일련의 코드
	- 일을 시키는 것
	- 필요한 기능을 미리 구현해 놓고 필요할 때마다 호출하여 사용.
	- 재사용
	예) 두 수를 더하는 함수
	- 함수가 실행하기 위해 필요한 정보로 매개변수라 한다.
	- 매개변수는 꼭 필요한 정보만 사용한다.
	예) 음료수 자판기에서 음료수를 뽑을 때, 돈을 넣고 음료를 선책하여
	음료수를 뽑는다.
	- 함수가 실행 후 알려주는 값을 반환값이라고 한다.
	- 반환값의 타입을 반환타입 또는 리턴타입이라고 한다.
	- 반환값은 return 이라는 예약어를 사용한다.
	- 반환값이 필요없는 경우는 반환타입을 void로 설정한다.
	예) 두 수를 더하는 함수에서 반환값은 두 수의 합이고, 반환타입은 정수
	돈을 넣고 콜라를 선택해서 콜라를 뽑으면 반환값은 선택한 음료이고,
	반환타입은 음료수
	- 매개변수는 없을 수 있다.
	- 매개변수가 2개인 경우 자료형 변수명1, 자료형 변수명2로 선언해야 한다.
	- 타입이 같아도 각각 선언한다.
	- 반환타입은 자료형을 쓴다.
	- 반환타입이 없는 void인 경우에도 return 예약어를 이용하여 중간에
	종료할 수 있다. return ; 
	- 함수의 리턴값이 있는 경우
	예) 변수 = 함수명(매개변수들);
	- 함수의 리턴값이 없는 경우
	예) 함수명(매개변수들);
	- 함수 호출 스택이란 메모리가 있음
	- 함수가 호출 될때마다 스택에 추가됨
	- 호출이 완료되면 스택에서 저거
	스택 : 위에서 추가되고 웨어서 빠짐 (자료구조의 일종)
	- 기능을 누어 코드를 구조를 파악하기 좋음
	- 재사용이 가능한 함수는 코드의 길이를 줄여줌
	- 유지 보수가 쉬움
 */

public class ClassEx01 {

	public static void main(String[] args) {
		// 지역변수
		int num;
		
		int result;
		int num1 = 1, num2 = 2;
		int num3 = 3;
		
		// 리턴타입이 있는 경우
		// 재사용 가능
		result = sum(num1, num2);
		result = sum(num3, result);
		System.out.println(result);
		
		// 리턴타입이 없는 경우
		// 재사용 불가능
		sum2(num1, num2);
		sum2(num1, num3);
	}
	
	/*
	두 정수의 합을 구해서 알려주는 메서드
	매개변수 : 두 정수 => int num1, int num2 
	리턴타입 : 두 정수의 합 => 정수 => int
	메서드명 : sum
	*/

	public static int sum(int num1, int num2) {
		int sum = num1 + num2;
		return sum;
	}
	
	/*
	두 정수의 합을 콘솔에 출력하는 메서드
	매개변수 : 두 정수 => int num1, int num2 
	리턴타입 : 없음 => void
	메서드명 : sum2
	*/
	
	public static void sum2(int num1, int num2) {
		int sum = num1 + num2;
		System.out.println(sum);
	}
}
// 학생 클래스
class Student1 {
	// 이름, 학번, 학기, 사는곳, 전공
	// 멤버변수
	String name, num, address, major;
	int semester;
	
}